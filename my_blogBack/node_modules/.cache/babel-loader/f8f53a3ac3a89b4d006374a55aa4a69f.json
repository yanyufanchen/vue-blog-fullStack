{"remainingRequest":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\src\\components\\goods\\Params.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\src\\components\\goods\\Params.vue","mtime":1565526455052},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wangpeng\\\\Desktop\\\\mt\\\\vue-ht\\\\my_project\\\\my_library\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getCategoriesList_api, getattributes_api, changeParams_api, addCateParams_api, deleteCateParams_api } from '@/api';\nimport { changeParamsCommon } from '@/api/compute.js';\nexport default {\n  data: function data() {\n    return {\n      common: ['商品管理', '分类参数'],\n      //公共组件传值\n      //   联级选择器\n      //绑定用户选择的分类值\n      selectedKeys: [],\n      //选中选择器id数组\n      //此为选择器需要获取的数据\n      options: [],\n      activeName: 'first',\n      //动态参数\n      manytableData: [],\n      //静态参数\n      onlytableData: [],\n      //tab栏切换属性\n      sel: 'many',\n      addparamValue: '',\n      //追加参数标签的value值\n      addParamsVisible: false,\n      //添加参数对话框的显示与隐藏\n      editParamsVisible: false,\n      //编辑参数对话框的显示与隐藏\n      addParamsForm: {},\n      //添加参数表单  \n      //编辑参数表单\n      editParamsForm: {\n        attr_name: ''\n      },\n      paramsrules: {\n        paramsName: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 8,\n          message: '长度在 2 到 8 个字符',\n          trigger: 'blur'\n        }],\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 8,\n          message: '长度在 2 到 8 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getGoodsCateList();\n  },\n  computed: {\n    isBtnDisablad: function isBtnDisablad() {\n      if (this.selectedKeys.length !== 3) {\n        return true;\n      }\n\n      return false;\n    },\n    titleText: function titleText() {\n      if (this.sel == 'many') {\n        return '动态参数';\n      } else if (this.sel == 'only') {\n        return '静态属性';\n      }\n    }\n  },\n  methods: {\n    //分类选中，执行\n    //获取选择器的值\n    //当选择器值改变时触发\n    handleChange: function handleChange(value) {\n      if (this.selectedKeys.length > 0) {\n        this.getattributes();\n      } else {\n        //当用户删除选中分类，就清空下面的参数信息\n        this.manytableData = [];\n        this.onlytableData = [];\n      }\n    },\n    //获取分类信息\n    getGoodsCateList: function () {\n      var _getGoodsCateList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getCategoriesList_api();\n\n              case 2:\n                _ref = _context.sent;\n                res = _ref.data;\n\n                if (!(res.meta.status != 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取商品分类列表失败'));\n\n              case 6:\n                this.$message.success('获取商品分类列表成功');\n                this.options = res.data;\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getGoodsCateList() {\n        return _getGoodsCateList.apply(this, arguments);\n      }\n\n      return getGoodsCateList;\n    }(),\n    //tab栏切换执行函数\n    // console.log(tab.name);\n    handleClick: function handleClick(tab, event) {\n      if (tab.name == 'first') {\n        this.sel = 'many';\n      } else if (tab.name == 'second') {\n        this.sel = 'only';\n      } // console.log(this.sel, 666)\n\n\n      if (this.selectedKeys.length > 0) {\n        //如果用户选择了分类,才执行获取数据函数\n        // console.log(22)\n        this.getattributes();\n      }\n    },\n    //获取指定分类的参数\n    getattributes: function () {\n      var _getattributes = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getattributes_api({\n                  id: this.selectedKeys[this.selectedKeys.length - 1],\n                  sel: this.sel\n                });\n\n              case 2:\n                _ref2 = _context2.sent;\n                res = _ref2.data;\n\n                if (!(res.meta.status != 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取商品分类参数失败'));\n\n              case 6:\n                this.$message.success('获取商品分类参数成功'); //   console.log(res.data);\n\n                res.data.forEach(function (item) {\n                  //添加自定义状态，控制input的显示与隐藏\n                  item.inputVisible = false;\n                  item.attr_vals.length > 0 ? item.attr_vals = item.attr_vals.split(',') : item.attr_vals = [];\n                });\n                this.sel == 'many' ? this.manytableData = res.data : this.onlytableData = res.data;\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getattributes() {\n        return _getattributes.apply(this, arguments);\n      }\n\n      return getattributes;\n    }(),\n    // 添加参数名称\n    addCateParams: function () {\n      var _addCateParams = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref3, res;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return addCateParams_api({\n                  attr_name: this.addParamsForm.paramsName,\n                  attr_sel: this.sel,\n                  id: this.selectedKeys[this.selectedKeys.length - 1]\n                });\n\n              case 2:\n                _ref3 = _context3.sent;\n                res = _ref3.data;\n\n                if (!(res.meta.status !== 201)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('添加商品分类参数失败'));\n\n              case 6:\n                this.$message.success('添加商品分类参数成功');\n                this.getattributes();\n                this.addParamsVisible = false;\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function addCateParams() {\n        return _addCateParams.apply(this, arguments);\n      }\n\n      return addCateParams;\n    }(),\n    // 编辑参数名称\n    editCateParamsName: function editCateParamsName(row) {\n      //   console.log(row)\n      this.editParamsVisible = true;\n      this.editParamsForm.attr_name = row.attr_name;\n      this.editParamsForm.attrId = row.attr_id;\n      this.editParamsForm.id = row.cat_id;\n      this.editParamsForm.attr_sel = row.attr_sel;\n      this.editParamsForm.attr_vals = row.attr_vals.join();\n    },\n    // 编辑参数提交\n    editCateParams: function editCateParams() {\n      var _this = this;\n\n      //   console.log(this.editParamsForm)\n      // if (this.editParamsForm.paramsName.trim()=='') return this.$message.error('请填写正确的参数名称')\n      this.$refs.editParamsFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee4(result) {\n          var _ref5, res;\n\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  if (result) {\n                    _context4.next = 2;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\", _this.$message.error('修改失败'));\n\n                case 2:\n                  _context4.next = 4;\n                  return changeParams_api(_this.editParamsForm);\n\n                case 4:\n                  _ref5 = _context4.sent;\n                  res = _ref5.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context4.next = 8;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\", _this.$message.error('修改商品分类参数失败'));\n\n                case 8:\n                  _this.$message.success('修改商品分类参数成功');\n\n                  _this.editParamsVisible = false;\n\n                  _this.getattributes();\n\n                case 11:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n    // 删除参数名称\n    deleteCateParams: function () {\n      var _deleteCateParams = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(row) {\n        var confirmResult, _ref6, res;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                  confirmButtonText: '确定删除',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context5.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.$message.info('已经取消删除'));\n\n              case 5:\n                _context5.next = 7;\n                return deleteCateParams_api({\n                  id: row.cat_id,\n                  attrid: row.attr_id\n                });\n\n              case 7:\n                _ref6 = _context5.sent;\n                res = _ref6.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.$message.error('删除商品分类参数失败'));\n\n              case 11:\n                this.$message.success('删除商品分类参数成功');\n                this.getattributes();\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function deleteCateParams(_x2) {\n        return _deleteCateParams.apply(this, arguments);\n      }\n\n      return deleteCateParams;\n    }(),\n    // 追加参数标签显示input\n    showInput: function showInput(rose) {\n      var _this2 = this;\n\n      //参数\n      //   console.log(rose);\n      // 从标签切换到inut\n      rose.inputVisible = true; // input自动获得焦点\n      // $nextTick就是当页面的input渲染出来的时候，才执行里面的函数,因为input使用了v-if,切换的时候需要页面重绘\n\n      this.$nextTick(function (_) {\n        _this2.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    // input结束执行添加参数标签\n    handleInputConfirm: function () {\n      var _handleInputConfirm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(rose) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this.addparamValue.trim().length == 0)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                this.addparamValue = '';\n                rose.inputVisible = false;\n                return _context6.abrupt(\"return\");\n\n              case 4:\n                rose.attr_vals.push(this.addparamValue.trim());\n                this.addparamValue = '';\n                rose.inputVisible = false; //   console.log(rose)\n                // 调用compute-api更新数据库参数属性\n\n                changeParamsCommon(rose).then(function (res) {\n                  // console.log(res)\n                  if (res.meta.status != 200) return _this3.$message.error('更新参数属性失败');\n\n                  _this3.$message.success('更新参数属性成功');\n                });\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleInputConfirm(_x3) {\n        return _handleInputConfirm.apply(this, arguments);\n      }\n\n      return handleInputConfirm;\n    }(),\n    closeParams: function () {\n      var _closeParams = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(row, tag) {\n        var _this4 = this;\n\n        var confirmResult;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                  confirmButtonText: '确定删除',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context7.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this.$message.info('已经取消删除'));\n\n              case 5:\n                row.attr_vals.pop(tag); // 调用更新数据库参数属性\n\n                changeParamsCommon(row).then(function (res) {\n                  // console.log(res)\n                  if (res.meta.status !== 200) return _this4.$message.error('删除参数属性失败');\n\n                  _this4.$message.success('删除参数属性成功');\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function closeParams(_x4, _x5) {\n        return _closeParams.apply(this, arguments);\n      }\n\n      return closeParams;\n    }(),\n    handleClose: function handleClose(done) {\n      this.addParamsVisible = false;\n      this.editParamsVisible = false;\n    }\n  }\n};",{"version":3,"sources":["Params.vue"],"names":[],"mappings":"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","sourcesContent":["\r\n<template>\r\n  <div>\r\n    <Breadcrumb :value=\"common\"></Breadcrumb>\r\n    <el-card class=\"box-card\">\r\n      <div class=\"text item\">\r\n        <el-button type=\"success\" style class=\"search_button\">添加分类</el-button>\r\n      </div>\r\n      <!-- 提示信息 -->\r\n      <el-alert\r\n        class=\"alert\"\r\n        title=\"注意：只允许为第三级分类设置相关参数！\"\r\n        type=\"warning\"\r\n        show-icon\r\n        :closable=\"false\"\r\n      ></el-alert>\r\n\r\n      <el-form ref=\"goodscateFormRef\" label-width=\"110px\">\r\n        <!-- 多级分类信息 -->\r\n        <el-form-item label=\"选择商品分类：\">\r\n          <el-cascader\r\n            style=\"width:20%\"\r\n            clearable\r\n            v-model=\"selectedKeys\"\r\n            :options=\"options\"\r\n            :props=\"{ \r\n              expandTrigger: 'hover',\r\n              value:'cat_id',\r\n              label:'cat_name',\r\n                children:'children'\r\n               }\"\r\n            @change=\"handleChange\"\r\n          ></el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- tab栏 -->\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\r\n        <!-- tabs用户管理 -->\r\n        <el-tab-pane label=\"用户管理\" name=\"first\">\r\n          <el-button\r\n            type=\"primary\"\r\n            size=\"mini\"\r\n            :disabled=\"isBtnDisablad\"\r\n            @click=\"addParamsVisible = true\"\r\n          >添加参数</el-button>\r\n          <el-table :data=\"manytableData\" style=\"width: 100%\">\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"props\">\r\n                <el-form label-position=\"left\" inline class=\"demo-table-expand\">\r\n                  <!-- 渲染参数标签 -->\r\n                  <el-tag\r\n                    v-for=\"(tag,index) in props.row.attr_vals\"\r\n                    :key=\"index\"\r\n                    closable\r\n                    type=\"danger\"\r\n                    class=\"el-tag\"\r\n                    @close=\"closeParams(props.row,tag)\"\r\n                  >{{tag}}</el-tag>\r\n                  <!-- 追加参数标签 -->\r\n                  <el-input\r\n                    class=\"input-new-tag\"\r\n                    v-if=\"props.row.inputVisible\"\r\n                    v-model=\"addparamValue\"\r\n                    ref=\"saveTagInput\"\r\n                    size=\"small\"\r\n                    @keyup.enter.native=\"handleInputConfirm(props.row)\"\r\n                    @blur=\"handleInputConfirm(props.row)\"\r\n                  ></el-input>\r\n                  <el-button\r\n                    v-else\r\n                    class=\"button-new-tag\"\r\n                    size=\"small\"\r\n                    @click=\"showInput(props.row)\"\r\n                  >+ New Tag</el-button>\r\n                </el-form>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\r\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\" width=\"300px\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button\r\n                  size=\"mini\"\r\n                  type=\"primary\"\r\n                  icon=\"el-icon-edit\"\r\n                  @click=\"editCateParamsName(scope.row)\"\r\n                >编辑</el-button>\r\n                <el-button\r\n                  size=\"mini\"\r\n                  type=\"danger\"\r\n                  icon=\"el-icon-delete\"\r\n                  @click=\"deleteCateParams(scope.row)\"\r\n                >删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n        <!-- tabs配置管理 -->\r\n        <el-tab-pane label=\"配置管理\" name=\"second\">\r\n          <el-button\r\n            type=\"primary\"\r\n            size=\"mini\"\r\n            :disabled=\"isBtnDisablad\"\r\n            @click=\"addParamsVisible = true\"\r\n          >添加参数</el-button>\r\n          <el-table :data=\"onlytableData\" style=\"width: 100%\">\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"props\">\r\n                <el-form label-position=\"left\" inline class=\"demo-table-expand\">\r\n                  <!-- <el-form-item>\r\n                    <span>{{ props.row.attr_vals }}</span>\r\n                  </el-form-item>-->\r\n                  <el-tag closable type=\"danger\" class=\"el-tag\">{{props.row.attr_vals}}</el-tag>\r\n                </el-form>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\r\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\" width=\"300px\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\">编辑</el-button>\r\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n    </el-card>\r\n    <!-- 添加参数的对话框 -->\r\n    <el-dialog\r\n      :title=\"'添加'+titleText\"\r\n      :visible.sync=\"addParamsVisible\"\r\n      width=\"45%\"\r\n      :before-close=\"handleClose\"\r\n    >\r\n      <el-form\r\n        :model=\"addParamsForm\"\r\n        status-icon\r\n        :rules=\"paramsrules\"\r\n        ref=\"addParamsFormRef\"\r\n        label-width=\"100px\"\r\n        class=\"demo-ruleForm\"\r\n      >\r\n        <el-form-item :label=\"titleText\" prop=\"paramsName\">\r\n          <el-input v-model=\"addParamsForm.paramsName\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addParamsVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCateParams\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <!-- 编辑参数的对话框 -->\r\n    <el-dialog\r\n      :title=\"'编辑'+titleText\"\r\n      :visible.sync=\"editParamsVisible\"\r\n      width=\"45%\"\r\n      :before-close=\"handleClose\"\r\n    >\r\n      <el-form\r\n        :model=\"editParamsForm\"\r\n        status-icon\r\n        :rules=\"paramsrules\"\r\n        ref=\"editParamsFormRef\"\r\n        label-width=\"100px\"\r\n        class=\"demo-ruleForm\"\r\n      >\r\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n          <el-input v-model=\"editParamsForm.attr_name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editParamsVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"editCateParams\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getCategoriesList_api,\r\n  getattributes_api,\r\n  changeParams_api,\r\n  addCateParams_api,\r\n  deleteCateParams_api,\r\n  \r\n} from '@/api'\r\nimport {\r\n changeParamsCommon\r\n} from '@/api/compute.js'\r\nexport default {\r\n    data() {\r\n        return {\r\n            common: ['商品管理', '分类参数'], //公共组件传值\r\n            //   联级选择器\r\n            //绑定用户选择的分类值\r\n            selectedKeys: [], //选中选择器id数组\r\n            //此为选择器需要获取的数据\r\n            options: [], \r\n            activeName: 'first',//动态参数\r\n            manytableData: [],\r\n            //静态参数\r\n            onlytableData: [],\r\n            //tab栏切换属性\r\n            sel: 'many',\r\n            addparamValue: '', //追加参数标签的value值\r\n            addParamsVisible: false, //添加参数对话框的显示与隐藏\r\n            editParamsVisible: false, //编辑参数对话框的显示与隐藏\r\n            addParamsForm: {}, //添加参数表单  \r\n            //编辑参数表单\r\n            editParamsForm: {\r\n              attr_name: ''\r\n            }, \r\n            paramsrules: {\r\n                paramsName: [\r\n                    { required: true, message: '请输入参数名称', trigger: 'blur' },\r\n                    { min: 2, max: 8, message: '长度在 2 到 8 个字符', trigger: 'blur' }\r\n                ],\r\n                attr_name: [\r\n                    { required: true, message: '请输入参数名称', trigger: 'blur' },\r\n                    { min: 2, max: 8, message: '长度在 2 到 8 个字符', trigger: 'blur' }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.getGoodsCateList()\r\n    },\r\n    computed: {\r\n        isBtnDisablad() {\r\n            if (this.selectedKeys.length !== 3) {\r\n              return true\r\n            }\r\n            return false\r\n        },\r\n        titleText() {\r\n            if (this.sel == 'many') {\r\n              return '动态参数'\r\n            } else if (this.sel == 'only') {\r\n              return '静态属性'\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        //分类选中，执行\r\n        //获取选择器的值\r\n        //当选择器值改变时触发\r\n        handleChange(value) {\r\n            if (this.selectedKeys.length > 0) {\r\n                this.getattributes()\r\n            } else {\r\n              //当用户删除选中分类，就清空下面的参数信息\r\n                this.manytableData = []\r\n                this.onlytableData = []\r\n            }\r\n        },\r\n        //获取分类信息\r\n        async getGoodsCateList() {\r\n        const { data: res } = await getCategoriesList_api()\r\n            //   console.log(res)\r\n            if (res.meta.status != 200)\r\n                return this.$message.error('获取商品分类列表失败')\r\n            this.$message.success('获取商品分类列表成功')\r\n            this.options = res.data\r\n        },\r\n        //tab栏切换执行函数\r\n        // console.log(tab.name);\r\n        handleClick(tab, event) {\r\n            if (tab.name == 'first') {\r\n                this.sel = 'many'\r\n            } else if (tab.name == 'second') {\r\n                this.sel = 'only'\r\n            }\r\n            // console.log(this.sel, 666)\r\n            if (this.selectedKeys.length > 0) {\r\n                //如果用户选择了分类,才执行获取数据函数\r\n                // console.log(22)\r\n                this.getattributes()\r\n            }\r\n        },\r\n        //获取指定分类的参数\r\n        async getattributes() {\r\n            //获取参数\r\n            const { data: res } = await getattributes_api({\r\n                id: this.selectedKeys[this.selectedKeys.length - 1],\r\n                sel: this.sel\r\n            })\r\n            //   console.log(res.data)\r\n            if (res.meta.status != 200)\r\n                return this.$message.error('获取商品分类参数失败')\r\n            this.$message.success('获取商品分类参数成功')\r\n            //   console.log(res.data);\r\n            res.data.forEach(item => {\r\n            //添加自定义状态，控制input的显示与隐藏\r\n                item.inputVisible = false\r\n                item.attr_vals.length > 0 ? (item.attr_vals = item.attr_vals.split(',')) : (item.attr_vals = [])\r\n          })\r\n          this.sel == 'many'\r\n            ? (this.manytableData = res.data)\r\n            : (this.onlytableData = res.data)\r\n        },\r\n        // 添加参数名称\r\n        async addCateParams() {\r\n            const { data: res } = await addCateParams_api({\r\n                attr_name: this.addParamsForm.paramsName,\r\n                attr_sel: this.sel,\r\n                id: this.selectedKeys[this.selectedKeys.length - 1]\r\n            })\r\n            //   console.log(res)\r\n            if (res.meta.status !== 201)\r\n                return this.$message.error('添加商品分类参数失败')\r\n            this.$message.success('添加商品分类参数成功')\r\n            this.getattributes()\r\n            this.addParamsVisible = false\r\n        },\r\n        // 编辑参数名称\r\n        editCateParamsName(row) {\r\n            //   console.log(row)\r\n            this.editParamsVisible = true\r\n            this.editParamsForm.attr_name = row.attr_name\r\n            this.editParamsForm.attrId = row.attr_id\r\n            this.editParamsForm.id = row.cat_id\r\n            this.editParamsForm.attr_sel = row.attr_sel\r\n            this.editParamsForm.attr_vals = row.attr_vals.join()\r\n        },\r\n        // 编辑参数提交\r\n        editCateParams() {\r\n            //   console.log(this.editParamsForm)\r\n            // if (this.editParamsForm.paramsName.trim()=='') return this.$message.error('请填写正确的参数名称')\r\n            this.$refs.editParamsFormRef.validate(async result => {\r\n                if (!result) return this.$message.error('修改失败')\r\n                const { data: res } = await changeParams_api(this.editParamsForm)\r\n                // console.log(res);\r\n                if (res.meta.status !== 200)\r\n                return this.$message.error('修改商品分类参数失败')\r\n                this.$message.success('修改商品分类参数成功')\r\n                this.editParamsVisible = false\r\n                this.getattributes()\r\n            })\r\n        },\r\n        // 删除参数名称\r\n        async deleteCateParams(row) {\r\n            // console.log(row)\r\n            const confirmResult = await this.$confirm(\r\n                '此操作将永久删除该文件, 是否继续?',\r\n                '提示',\r\n                {\r\n                  confirmButtonText: '确定删除',\r\n                  cancelButtonText: '取消',\r\n                  type: 'warning'\r\n                }\r\n            ).catch(err => err)\r\n            //如果用户点击确认，则confirmResult 为'confirm'\r\n            //如果用户点击取消, 则confirmResult获取的就是catch的错误消息'cancel'\r\n            if (confirmResult !== 'confirm') {\r\n              return this.$message.info('已经取消删除')\r\n            }\r\n            //   console.log(row)\r\n\r\n            const { data: res } = await deleteCateParams_api({\r\n                id: row.cat_id,\r\n                attrid: row.attr_id\r\n            })\r\n            if (res.meta.status !== 200)\r\n                return this.$message.error('删除商品分类参数失败')\r\n            this.$message.success('删除商品分类参数成功')\r\n            this.getattributes()\r\n        },\r\n        // 追加参数标签显示input\r\n        showInput(rose) {\r\n            //参数\r\n            //   console.log(rose);\r\n            // 从标签切换到inut\r\n            rose.inputVisible = true\r\n            // input自动获得焦点\r\n            // $nextTick就是当页面的input渲染出来的时候，才执行里面的函数,因为input使用了v-if,切换的时候需要页面重绘\r\n            this.$nextTick(_ => {\r\n                this.$refs.saveTagInput.$refs.input.focus()\r\n            })\r\n        },\r\n        // input结束执行添加参数标签\r\n        async handleInputConfirm(rose) {\r\n            if (this.addparamValue.trim().length == 0) {\r\n                this.addparamValue = ''\r\n                rose.inputVisible = false\r\n                return\r\n            }\r\n            rose.attr_vals.push(this.addparamValue.trim())\r\n            this.addparamValue = ''\r\n            rose.inputVisible = false\r\n            //   console.log(rose)\r\n             // 调用compute-api更新数据库参数属性\r\n            changeParamsCommon(rose).then(res => {\r\n                // console.log(res)\r\n                if (res.meta.status != 200) return this.$message.error('更新参数属性失败')\r\n                this.$message.success('更新参数属性成功')\r\n            })\r\n        },\r\n        async closeParams(row, tag) {\r\n            const confirmResult = await this.$confirm(\r\n              '此操作将永久删除该文件, 是否继续?',\r\n              '提示',\r\n              {\r\n                confirmButtonText: '确定删除',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n              }\r\n            ).catch(err => err)\r\n            //如果用户点击确认，则confirmResult 为'confirm'\r\n            //如果用户点击取消, 则confirmResult获取的就是catch的错误消息'cancel'\r\n            if (confirmResult !== 'confirm') {\r\n                return this.$message.info('已经取消删除')\r\n            }\r\n            row.attr_vals.pop(tag)\r\n            // 调用更新数据库参数属性\r\n            changeParamsCommon(row).then(res => {\r\n                // console.log(res)\r\n                if (res.meta.status !== 200)\r\n                return this.$message.error('删除参数属性失败')\r\n                this.$message.success('删除参数属性成功')\r\n            })\r\n        },\r\n        handleClose(done) {\r\n            this.addParamsVisible = false\r\n            this.editParamsVisible = false\r\n        },\r\n      }\r\n    }\r\n</script>\r\n<style lang='less' scoped>\r\n.alert {\r\n  margin: 10px 0;\r\n}\r\n.el-tag {\r\n  margin: 10px;\r\n}\r\n.el-tag + .el-tag {\r\n  margin-left: 10px;\r\n}\r\n.button-new-tag {\r\n  margin-left: 10px;\r\n  height: 32px;\r\n  line-height: 30px;\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n}\r\n.input-new-tag {\r\n  width: 90px;\r\n  margin: 10px;\r\n  vertical-align: bottom;\r\n}\r\n</style>"],"sourceRoot":"src/components/goods"}]}