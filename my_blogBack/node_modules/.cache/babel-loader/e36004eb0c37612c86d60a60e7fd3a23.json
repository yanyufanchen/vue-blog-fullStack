{"remainingRequest":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\src\\components\\goods\\Categories.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\src\\components\\goods\\Categories.vue","mtime":1565524504877},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wangpeng\\Desktop\\mt\\vue-ht\\my_project\\my_library\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\wangpeng\\\\Desktop\\\\mt\\\\vue-ht\\\\my_project\\\\my_library\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getCategoriesList_api, addCateName_api } from '@/api';\nexport default {\n  data: function data() {\n    return {\n      CatedialogVisible: false,\n      //对话框显示隐藏\n      addCateForm: {\n        //对话框内分类名称value\n        cateName: ''\n      },\n      // 表单验证规则\n      cateFormRules: {\n        // 验证用户名\n        cateName: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 8,\n          message: '长度在 2 到 8 个字符',\n          trigger: 'blur'\n        }]\n      },\n      common: ['商品管理', '商品分类'],\n      //公共组件传值\n      cateList: [],\n      //获取分类数据\n      queryInfo: {\n        //请求商品列表参数\n        pagenum: 1,\n        pagesize: 5\n      },\n      total: 0,\n      //总页数\n      //   树状结构参数\n      props: {\n        stripe: false,\n        border: true,\n        showHeader: true,\n        showSummary: false,\n        showRowHover: false,\n        showIndex: true,\n        treeType: true,\n        isFold: true,\n        expandType: false,\n        selectionType: false\n      },\n      //   树状结构参数\n      columns: [{\n        label: '名称',\n        prop: 'cat_name',\n        width: '300px'\n      }, {\n        label: '是否有效',\n        type: 'template',\n        template: 'valid'\n      }, {\n        label: '排序',\n        type: 'template',\n        template: 'sort'\n      }, {\n        label: '操作',\n        type: 'template',\n        template: 'operation'\n      }],\n      //   联级选择器\n      //绑定用户选择的分类值\n      selectedKeys: [],\n      options: [],\n      //此为选择器需要获取的数据\n      cateNameList: [] //选中选择器的分类值\n\n    };\n  },\n  created: function created() {\n    this.getCategoriesList();\n  },\n  methods: {\n    addCateClose: function addCateClose() {\n      //关闭对话框执行函数\n      // console.log(this.$refs.cateFormRef);\n      this.$refs.cateFormRef.resetFields();\n      this.selectedKeys = [];\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      //   console.log(val);\n      this.queryInfo.pagesize = val;\n      this.getCategoriesList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      //   console.log(val);\n      this.queryInfo.pagenum = val;\n      this.getCategoriesList();\n    },\n    getCategoriesList: function () {\n      var _getCategoriesList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getCategoriesList_api(this.queryInfo);\n\n              case 2:\n                _ref = _context.sent;\n                res = _ref.data;\n\n                if (!(res.meta.status != 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取用户数据列表失败'));\n\n              case 6:\n                this.$message.success('获取用户数据列表成功');\n                this.cateList = res.data.result;\n                this.total = res.data.total; // console.log(res.data);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCategoriesList() {\n        return _getCategoriesList.apply(this, arguments);\n      }\n\n      return getCategoriesList;\n    }(),\n    handleClose: function handleClose() {\n      //关闭对话框\n      this.CatedialogVisible = false;\n    },\n    showCatedialogVisible: function showCatedialogVisible() {\n      //显示对话框\n      this.showGetCategoriesList();\n      this.CatedialogVisible = true;\n    },\n    handleChange: function handleChange(value) {\n      //获取选择器的值\n      //当选择器值改变时触发\n      this.cateNameList = value; //  console.log(value);\n    },\n    showGetCategoriesList: function () {\n      var _showGetCategoriesList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getCategoriesList_api({\n                  type: 2\n                });\n\n              case 2:\n                _ref2 = _context2.sent;\n                res = _ref2.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取用户数据列表失败'));\n\n              case 6:\n                this.$message.success('获取用户数据列表成功'); // console.log(res.data);\n\n                this.options = res.data;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function showGetCategoriesList() {\n        return _showGetCategoriesList.apply(this, arguments);\n      }\n\n      return showGetCategoriesList;\n    }(),\n    addCateName: function () {\n      var _addCateName = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var params, _ref3, res;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.addCateForm.cateName == '' && this.addCateForm.cateName < 2)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('请填写正确的分类名称'));\n\n              case 2:\n                // console.log(this.cateNameList)\n                // console.log(this.addCateForm.cateName)\n                params = {}; //需要请求提交的数据对象\n\n                params.cat_name = this.addCateForm.cateName;\n\n                if (this.cateNameList.length > 0) {\n                  //二级分类or三级分类\n                  params.cat_pid = this.cateNameList[this.cateNameList.length - 1];\n                  params.cat_level = this.cateNameList.length;\n                } else if (this.cateNameList.length <= 0) {\n                  params.cat_pid = 0;\n                  params.cat_level = 0;\n                } // console.log(params);\n\n\n                _context3.next = 7;\n                return addCateName_api(params);\n\n              case 7:\n                _ref3 = _context3.sent;\n                res = _ref3.data;\n\n                if (!(res.meta.status !== 201)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('添加分类失败'));\n\n              case 11:\n                this.$message.success('添加分类成功');\n                this.getCategoriesList();\n                this.CatedialogVisible = false;\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function addCateName() {\n        return _addCateName.apply(this, arguments);\n      }\n\n      return addCateName;\n    }()\n  }\n};",{"version":3,"sources":["Categories.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA,SAAA,qBAAA,EAAA,eAAA,QAAA,OAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,iBAAA,EAAA,KADA;AACA;AACA,MAAA,WAAA,EAAA;AACA;AACA,QAAA,QAAA,EAAA;AAFA,OAFA;AAOA;AACA,MAAA,aAAA,EAAA;AACA;AACA,QAAA,QAAA,EAAA,CACA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA,QAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,GAAA,EAAA,CAAA;AAAA,UAAA,OAAA,EAAA,eAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAFA;AAFA,OARA;AAgBA,MAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAhBA;AAgBA;AACA,MAAA,QAAA,EAAA,EAjBA;AAiBA;AACA,MAAA,SAAA,EAAA;AACA;AACA,QAAA,OAAA,EAAA,CAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAlBA;AAuBA,MAAA,KAAA,EAAA,CAvBA;AAuBA;AACA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,MAAA,EAAA,KADA;AAEA,QAAA,MAAA,EAAA,IAFA;AAGA,QAAA,UAAA,EAAA,IAHA;AAIA,QAAA,WAAA,EAAA,KAJA;AAKA,QAAA,YAAA,EAAA,KALA;AAMA,QAAA,SAAA,EAAA,IANA;AAOA,QAAA,QAAA,EAAA,IAPA;AAQA,QAAA,MAAA,EAAA,IARA;AASA,QAAA,UAAA,EAAA,KATA;AAUA,QAAA,aAAA,EAAA;AAVA,OAzBA;AAqCA;AACA,MAAA,OAAA,EAAA,CACA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,IAAA,EAAA,UAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAXA,EAgBA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAhBA,CAtCA;AA4DA;AACA;AACA,MAAA,YAAA,EAAA,EA9DA;AA+DA,MAAA,OAAA,EAAA,EA/DA;AA+DA;AACA,MAAA,YAAA,EAAA,EAhEA,CAgEA;;AAhEA,KAAA;AAkEA,GApEA;AAqEA,EAAA,OArEA,qBAqEA;AACA,SAAA,iBAAA;AACA,GAvEA;AAwEA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AAAA;AACA;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,WAAA;AACA,WAAA,YAAA,GAAA,EAAA;AACA,KALA;AAMA,IAAA,gBANA,4BAMA,GANA,EAMA;AACA;AACA,WAAA,SAAA,CAAA,QAAA,GAAA,GAAA;AACA,WAAA,iBAAA;AACA,KAVA;AAWA,IAAA,mBAXA,+BAWA,GAXA,EAWA;AACA;AACA,WAAA,SAAA,CAAA,OAAA,GAAA,GAAA;AACA,WAAA,iBAAA;AACA,KAfA;AAgBA,IAAA,iBAhBA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAiBA,qBAAA,CAAA,KAAA,SAAA,CAjBA;;AAAA;AAAA;AAiBA,gBAAA,GAjBA,QAiBA,IAjBA;;AAAA,sBAkBA,GAAA,CAAA,IAAA,CAAA,MAAA,IAAA,GAlBA;AAAA;AAAA;AAAA;;AAAA,iDAkBA,KAAA,QAAA,CAAA,KAAA,CAAA,YAAA,CAlBA;;AAAA;AAmBA,qBAAA,QAAA,CAAA,OAAA,CAAA,YAAA;AACA,qBAAA,QAAA,GAAA,GAAA,CAAA,IAAA,CAAA,MAAA;AACA,qBAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CArBA,CAsBA;;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwBA,IAAA,WAxBA,yBAwBA;AACA;AACA,WAAA,iBAAA,GAAA,KAAA;AACA,KA3BA;AA4BA,IAAA,qBA5BA,mCA4BA;AACA;AACA,WAAA,qBAAA;AACA,WAAA,iBAAA,GAAA,IAAA;AACA,KAhCA;AAiCA,IAAA,YAjCA,wBAiCA,KAjCA,EAiCA;AAAA;AACA;AACA,WAAA,YAAA,GAAA,KAAA,CAFA,CAGA;AACA,KArCA;AAsCA,IAAA,qBAtCA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAuCA,qBAAA,CAAA;AAAA,kBAAA,IAAA,EAAA;AAAA,iBAAA,CAvCA;;AAAA;AAAA;AAuCA,gBAAA,GAvCA,SAuCA,IAvCA;;AAAA,sBAwCA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAxCA;AAAA;AAAA;AAAA;;AAAA,kDAyCA,KAAA,QAAA,CAAA,KAAA,CAAA,YAAA,CAzCA;;AAAA;AA0CA,qBAAA,QAAA,CAAA,OAAA,CAAA,YAAA,EA1CA,CA2CA;;AACA,qBAAA,OAAA,GAAA,GAAA,CAAA,IAAA;;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8CA,IAAA,WA9CA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBA+CA,KAAA,WAAA,CAAA,QAAA,IAAA,EAAA,IAAA,KAAA,WAAA,CAAA,QAAA,GAAA,CA/CA;AAAA;AAAA;AAAA;;AAAA,kDAgDA,KAAA,QAAA,CAAA,KAAA,CAAA,YAAA,CAhDA;;AAAA;AAkDA;AACA;AACA,gBAAA,MApDA,GAoDA,EApDA,EAoDA;;AACA,gBAAA,MAAA,CAAA,QAAA,GAAA,KAAA,WAAA,CAAA,QAAA;;AACA,oBAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA;AACA,kBAAA,MAAA,CAAA,OAAA,GAAA,KAAA,YAAA,CAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,kBAAA,MAAA,CAAA,SAAA,GAAA,KAAA,YAAA,CAAA,MAAA;AACA,iBAHA,MAGA,IAAA,KAAA,YAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,kBAAA,MAAA,CAAA,OAAA,GAAA,CAAA;AACA,kBAAA,MAAA,CAAA,SAAA,GAAA,CAAA;AACA,iBA5DA,CA6DA;;;AA7DA;AAAA,uBA8DA,eAAA,CAAA,MAAA,CA9DA;;AAAA;AAAA;AA8DA,gBAAA,GA9DA,SA8DA,IA9DA;;AAAA,sBAgEA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAhEA;AAAA;AAAA;AAAA;;AAAA,kDAiEA,KAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAjEA;;AAAA;AAkEA,qBAAA,QAAA,CAAA,OAAA,CAAA,QAAA;AACA,qBAAA,iBAAA;AACA,qBAAA,iBAAA,GAAA,KAAA;;AApEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxEA,CAAA","sourcesContent":["\r\n<template>\r\n  <div>\r\n    <Breadcrumb :value=\"common\"></Breadcrumb>\r\n    <el-card class=\"box-card\">\r\n      <div class=\"text item\">\r\n        <el-button type=\"success\" style class=\"search_button\" @click=\"showCatedialogVisible\">添加分类</el-button>\r\n      </div>\r\n      <tree-table\r\n        index-text=\"#\"\r\n        :data=\"cateList\"\r\n        :columns=\"columns\"\r\n        :stripe=\"props.stripe\"\r\n        :border=\"props.border\"\r\n        :show-header=\"props.showHeader\"\r\n        :show-summary=\"props.showSummary\"\r\n        :show-row-hover=\"props.showRowHover\"\r\n        :show-index=\"props.showIndex\"\r\n        :tree-type=\"props.treeType\"\r\n        :is-fold=\"props.isFold\"\r\n        :expand-type=\"props.expandType\"\r\n        :selection-type=\"props.selectionType\"\r\n      >\r\n        <!-- 自定义列‘是否有效’ -->\r\n        <template slot=\"valid\" scope=\"scope\">\r\n          <i\r\n            v-if=\"!scope.row.cat_deleted\"\r\n            class=\"el-icon-success\"\r\n            style=\"color:#85ce61;font-size:16px\"\r\n          ></i>\r\n          <i v-else class=\"el-icon-error\" style=\"color:red;font-size:16px\"></i>\r\n        </template>\r\n        <!-- 排序 -->\r\n        <template slot=\"sort\" scope=\"scope\">\r\n          <el-tag v-if=\"scope.row.cat_level==0\">一级</el-tag>\r\n          <el-tag type=\"success\" v-else-if=\"scope.row.cat_level==1\">二级</el-tag>\r\n          <el-tag type=\"warning\" v-else>三级</el-tag>\r\n        </template>\r\n        <!-- 操作 -->\r\n        <template slot=\"operation\" scope=\"scope\">\r\n          <!-- 修改按钮 -->\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\"></el-button>\r\n          <!-- 删除按钮 -->\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\"></el-button>\r\n        </template>\r\n      </tree-table>\r\n      <!-- //分页 -->\r\n      <el-pagination\r\n        background\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"queryInfo.pagenum\"\r\n        :page-sizes=\"[2, 5, 10, 20]\"\r\n        :page-size=\"queryInfo.pagesize\"\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :total=\"total\"\r\n      ></el-pagination>\r\n    </el-card>\r\n    <!-- 添加分类的对话框 -->\r\n    <el-dialog\r\n      @close=\"addCateClose\"\r\n      title=\"添加分类\"\r\n      :visible.sync=\"CatedialogVisible\"\r\n      width=\"40%\"\r\n      :before-close=\"handleClose\"\r\n    >\r\n      <el-form ref=\"cateFormRef\" :model=\"addCateForm\" :rules=\"cateFormRules\" label-width=\"100px\">\r\n        <!-- 账号 -->\r\n        <el-form-item prop=\"cateName\" label=\"活动名称:\">\r\n          <el-input\r\n            v-model=\"addCateForm.cateName\"\r\n            placeholder=\"请输入分类名称\"\r\n            prefix-icon=\"iconfont icon-user\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <!-- 多级分类信息 -->\r\n        <el-form-item label=\"分类名称:\">\r\n          <el-cascader\r\n            style=\"width:100%\"\r\n            clearable\r\n            change-on-select\r\n            v-model=\"selectedKeys\"\r\n            :options=\"options\"\r\n            :props=\"{ \r\n              expandTrigger: 'hover',\r\n              value:'cat_id',\r\n              label:'cat_name',\r\n                children:'children'\r\n               }\"\r\n            @change=\"handleChange\"\r\n          ></el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"CatedialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCateName\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import { getCategoriesList_api ,addCateName_api} from '@/api'\r\n    export default {\r\n        data() {\r\n            return {\r\n                CatedialogVisible: false, //对话框显示隐藏\r\n                addCateForm: {\r\n                //对话框内分类名称value\r\n                cateName: '',\r\n                \r\n                },\r\n                // 表单验证规则\r\n                cateFormRules: {\r\n                    // 验证用户名\r\n                    cateName: [\r\n                      { required: true, message: '请输入用户名', trigger: 'blur' },\r\n                      { min: 2, max: 8, message: '长度在 2 到 8 个字符', trigger: 'blur' }\r\n                    ]\r\n                },\r\n            \r\n                common: ['商品管理', '商品分类'], //公共组件传值\r\n                cateList: [], //获取分类数据\r\n                queryInfo: {\r\n                    //请求商品列表参数\r\n                    pagenum: 1,\r\n                    pagesize: 5\r\n                },\r\n                total: 0, //总页数\r\n                //   树状结构参数\r\n                props: {\r\n                    stripe: false,\r\n                    border: true,\r\n                    showHeader: true,\r\n                    showSummary: false,\r\n                    showRowHover: false,\r\n                    showIndex: true,\r\n                    treeType: true,\r\n                    isFold: true,\r\n                    expandType: false,\r\n                    selectionType: false\r\n                },\r\n                //   树状结构参数\r\n                columns: [\r\n                    {\r\n                      label: '名称',\r\n                      prop: 'cat_name',\r\n                      width: '300px'\r\n                    },\r\n                    {\r\n                      label: '是否有效',\r\n                      type: 'template',\r\n                      template: 'valid'\r\n                    },\r\n                    {\r\n                      label: '排序',\r\n                      type: 'template',\r\n                      template: 'sort'\r\n                    },\r\n                    {\r\n                      label: '操作',\r\n                      type: 'template',\r\n                      template: 'operation'\r\n                    }\r\n                ],\r\n                //   联级选择器\r\n                //绑定用户选择的分类值\r\n                selectedKeys:[],\r\n                options: [],  //此为选择器需要获取的数据\r\n                cateNameList:[]  //选中选择器的分类值\r\n            }\r\n        },  \r\n        created() {\r\n            this.getCategoriesList()\r\n        },  \r\n        methods: {\r\n            addCateClose() {  //关闭对话框执行函数\r\n                // console.log(this.$refs.cateFormRef);\r\n                this.$refs.cateFormRef.resetFields()  \r\n                this.selectedKeys = [];\r\n            },\r\n            handleSizeChange(val) {\r\n                //   console.log(val);\r\n                this.queryInfo.pagesize = val\r\n                this.getCategoriesList()\r\n            },\r\n            handleCurrentChange(val) {\r\n                //   console.log(val);\r\n                this.queryInfo.pagenum = val\r\n                this.getCategoriesList()\r\n            },\r\n            async getCategoriesList() {\r\n                const { data: res } = await getCategoriesList_api(this.queryInfo)\r\n                if (res.meta.status != 200) return this.$message.error('获取用户数据列表失败')\r\n                this.$message.success('获取用户数据列表成功')\r\n                this.cateList = res.data.result\r\n                this.total = res.data.total\r\n                // console.log(res.data);\r\n            },\r\n            handleClose() {\r\n                //关闭对话框\r\n                this.CatedialogVisible = false\r\n            },\r\n            showCatedialogVisible() {\r\n                //显示对话框\r\n                this.showGetCategoriesList()\r\n                this.CatedialogVisible = true\r\n            },\r\n            handleChange(value) {  //获取选择器的值\r\n              //当选择器值改变时触发\r\n                this.cateNameList=value\r\n                //  console.log(value);\r\n            },\r\n            async showGetCategoriesList() {  //多级联动分类名称获取\r\n                const { data: res } = await getCategoriesList_api({type:2})\r\n                if (res.meta.status !== 200)\r\n                  return this.$message.error('获取用户数据列表失败')\r\n                this.$message.success('获取用户数据列表成功')\r\n                // console.log(res.data);\r\n                this.options=res.data\r\n            },\r\n            async addCateName(){  //提交添加分类\r\n                if(this.addCateForm.cateName==''&&this.addCateForm.cateName<2){\r\n                    return this.$message.error('请填写正确的分类名称')\r\n                } \r\n                // console.log(this.cateNameList)\r\n                // console.log(this.addCateForm.cateName)\r\n                const params={} //需要请求提交的数据对象\r\n                params.cat_name=this.addCateForm.cateName\r\n                if(this.cateNameList.length>0){    //二级分类or三级分类\r\n                    params.cat_pid=this.cateNameList[this.cateNameList.length-1]\r\n                    params.cat_level=this.cateNameList.length\r\n                }else if(this.cateNameList.length<=0){\r\n                    params.cat_pid=0\r\n                    params.cat_level=0\r\n                }\r\n                // console.log(params);\r\n                const {data:res}=await addCateName_api(params)\r\n                // console.log(res);\r\n                if (res.meta.status !== 201)\r\n                return this.$message.error('添加分类失败')\r\n                this.$message.success('添加分类成功')\r\n                this.getCategoriesList()\r\n                this.CatedialogVisible = false\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style lang='less' scoped>\r\n.search_button {\r\n  margin-bottom: 10px;\r\n}\r\n</style>"],"sourceRoot":"src/components/goods"}]}