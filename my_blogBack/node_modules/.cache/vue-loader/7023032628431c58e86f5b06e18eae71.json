{"remainingRequest":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\src\\components\\common\\colorPickerDesk.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\src\\components\\common\\colorPickerDesk.vue","mtime":1590500855914},{"path":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\开发\\个人服务器\\pengwang.xyz\\my_blogBack\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nconst version = require(\"element-ui/package.json\").version; // 版本号\r\nconst ORIGINAL_THEME = \"#409EFF\";\r\n\r\nexport default {\r\n  name: \"colorPicker\",\r\n  data () {\r\n    return {\r\n      chalk: \"\",\r\n      theme: ORIGINAL_THEME,\r\n      predefineColors: [\r\n        \"#409EFF\",\r\n        \"#ff4500\",\r\n        \"#ff8c00\",\r\n        \"#ffd700\",\r\n        \"#90ee90\",\r\n        \"#00ced1\",\r\n        \"#1e90ff\",\r\n        \"#c71585\",\r\n        \"rgba(255, 69, 0, 0.68)\",\r\n        \"rgb(255, 120, 0)\",\r\n        \"hsv(51, 100, 98)\",\r\n        \"hsva(120, 40, 94, 0.5)\",\r\n        \"hsl(181, 100%, 37%)\",\r\n        \"hsla(209, 100%, 56%, 0.73)\",\r\n        \"#c7158577\"\r\n      ]\r\n    };\r\n  },\r\n  mounted () {\r\n    // 通过后台设置前台色后，存入数据库，然后前台加载时从数据库获取主题色\r\n    console.log('前台主题色选择工具');\r\n    this.theme = '#ccc'\r\n    // if(this.CheckIsColor(localStorage.getItem('colorPicker'))){\r\n    //   this.theme=localStorage.getItem('colorPicker')\r\n    // }\r\n  },\r\n  watch: {\r\n    // theme(val, oldVal) {\r\n    //   if (typeof val !== \"string\") return;\r\n    //   // localStorage.setItem('colorPickerDesk',val)\r\n    //   // console.log(val,'设置主题色');\r\n    //   if(val){\r\n    //     this.$store.commit('editThemeColor',val) \r\n    //     }\r\n    //   const themeCluster = this.getThemeCluster(val.replace(\"#\", \"\"));\r\n    //   const originalCluster = this.getThemeCluster(oldVal.replace(\"#\", \"\"));\r\n    //   const getHandler = (variable, id) => {\r\n    //     return () => {\r\n    //       const originalCluster = this.getThemeCluster(\r\n    //         ORIGINAL_THEME.replace(\"#\", \"\")\r\n    //       );\r\n    //       const newStyle = this.updateStyle(\r\n    //         this[variable],\r\n    //         originalCluster,\r\n    //         themeCluster\r\n    //       );\r\n\r\n    //       let styleTag = document.getElementById(id);\r\n    //       if (!styleTag) {\r\n    //         styleTag = document.createElement(\"style\");\r\n    //         styleTag.setAttribute(\"id\", id);\r\n    //         document.head.appendChild(styleTag);\r\n    //       }\r\n    //       styleTag.innerText = newStyle;\r\n    //     };\r\n    //   };\r\n\r\n    //   const chalkHandler = getHandler(\"chalk\", \"chalk-style\");\r\n\r\n    //   if (!this.chalk) {\r\n    //     const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`;\r\n    //     this.getCSSString(url, chalkHandler, \"chalk\");\r\n    //   } else {\r\n    //     chalkHandler();\r\n    //   }\r\n\r\n    //   const styles = [].slice\r\n    //     .call(document.querySelectorAll(\"style\"))\r\n    //     .filter(style => {\r\n    //       const text = style.innerText;\r\n    //       return (\r\n    //         new RegExp(oldVal, \"i\").test(text) && !/Chalk Variables/.test(text)\r\n    //       );\r\n    //     });\r\n    //   styles.forEach(style => {\r\n    //     const { innerText } = style;\r\n    //     if (typeof innerText !== \"string\") return;\r\n    //     style.innerText = this.updateStyle(\r\n    //       innerText,\r\n    //       originalCluster,\r\n    //       themeCluster\r\n    //     );\r\n    //   });\r\n\r\n    // }\r\n  },\r\n\r\n  methods: {\r\n    CheckIsColor (bgVal) {\r\n      console.log(bgVal, '初始化主题色');\r\n      if (!bgVal) return false\r\n      this.$store.commit('editThemeColor', bgVal)\r\n\r\n      　　var type = \"^#[0-9a-fA-F]{6}$\";\r\n      　　var re = new RegExp(type);\r\n      　　if (bgVal.match(re) == null) {\r\n        　　　　type = \"^[rR][gG][Bb][\\(]([\\\\s]*(2[0-4][0-9]|25[0-5]|[01]?[0-9][0-9]?)[\\\\s]*,){2}[\\\\s]*(2[0-4]\\\\d|25[0-5]|[01]?\\\\d\\\\d?)[\\\\s]*[\\)]{1}$\";\r\n        　　　　re = new RegExp(type);\r\n        　　　　if (bgVal.match(re) == null) {\r\n          　　　　　　return false;\r\n        　　　　} else {\r\n          　　　　　　return true;\r\n        　　　　}\r\n      　　　} else {\r\n        　　　　return true;\r\n      　　}\r\n    },\r\n    updateStyle (style, oldCluster, newCluster) {\r\n      let newStyle = style;\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, \"ig\"), newCluster[index]);\r\n      });\r\n      return newStyle;\r\n    },\r\n\r\n    getCSSString (url, callback, variable) {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, \"\");\r\n          callback();\r\n        }\r\n      };\r\n      xhr.open(\"GET\", url);\r\n      xhr.send();\r\n    },\r\n\r\n    getThemeCluster (theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16);\r\n        let green = parseInt(color.slice(2, 4), 16);\r\n        let blue = parseInt(color.slice(4, 6), 16);\r\n\r\n        if (tint === 0) {\r\n          // when primary color is in its rgb space\r\n          return [red, green, blue].join(\",\");\r\n        } else {\r\n          red += Math.round(tint * (255 - red));\r\n          green += Math.round(tint * (255 - green));\r\n          blue += Math.round(tint * (255 - blue));\r\n\r\n          red = red.toString(16);\r\n          green = green.toString(16);\r\n          blue = blue.toString(16);\r\n\r\n          return `#${red}${green}${blue}`;\r\n        }\r\n      };\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16);\r\n        let green = parseInt(color.slice(2, 4), 16);\r\n        let blue = parseInt(color.slice(4, 6), 16);\r\n\r\n        red = Math.round((1 - shade) * red);\r\n        green = Math.round((1 - shade) * green);\r\n        blue = Math.round((1 - shade) * blue);\r\n\r\n        red = red.toString(16);\r\n        green = green.toString(16);\r\n        blue = blue.toString(16);\r\n\r\n        return `#${red}${green}${blue}`;\r\n      };\r\n\r\n      const clusters = [theme];\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1));\r\n      return clusters;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["colorPickerDesk.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"colorPickerDesk.vue","sourceRoot":"src/components/common","sourcesContent":["\r\n<template>\r\n  <el-color-picker v-model=\"theme\"\r\n                   class=\"theme-picker\"\r\n                   :predefine=\"predefineColors\"\r\n                   popper-class=\"theme-picker-dropdown\"></el-color-picker>\r\n</template>\r\n \r\n<script>\r\nconst version = require(\"element-ui/package.json\").version; // 版本号\r\nconst ORIGINAL_THEME = \"#409EFF\";\r\n\r\nexport default {\r\n  name: \"colorPicker\",\r\n  data () {\r\n    return {\r\n      chalk: \"\",\r\n      theme: ORIGINAL_THEME,\r\n      predefineColors: [\r\n        \"#409EFF\",\r\n        \"#ff4500\",\r\n        \"#ff8c00\",\r\n        \"#ffd700\",\r\n        \"#90ee90\",\r\n        \"#00ced1\",\r\n        \"#1e90ff\",\r\n        \"#c71585\",\r\n        \"rgba(255, 69, 0, 0.68)\",\r\n        \"rgb(255, 120, 0)\",\r\n        \"hsv(51, 100, 98)\",\r\n        \"hsva(120, 40, 94, 0.5)\",\r\n        \"hsl(181, 100%, 37%)\",\r\n        \"hsla(209, 100%, 56%, 0.73)\",\r\n        \"#c7158577\"\r\n      ]\r\n    };\r\n  },\r\n  mounted () {\r\n    // 通过后台设置前台色后，存入数据库，然后前台加载时从数据库获取主题色\r\n    console.log('前台主题色选择工具');\r\n    this.theme = '#ccc'\r\n    // if(this.CheckIsColor(localStorage.getItem('colorPicker'))){\r\n    //   this.theme=localStorage.getItem('colorPicker')\r\n    // }\r\n  },\r\n  watch: {\r\n    // theme(val, oldVal) {\r\n    //   if (typeof val !== \"string\") return;\r\n    //   // localStorage.setItem('colorPickerDesk',val)\r\n    //   // console.log(val,'设置主题色');\r\n    //   if(val){\r\n    //     this.$store.commit('editThemeColor',val) \r\n    //     }\r\n    //   const themeCluster = this.getThemeCluster(val.replace(\"#\", \"\"));\r\n    //   const originalCluster = this.getThemeCluster(oldVal.replace(\"#\", \"\"));\r\n    //   const getHandler = (variable, id) => {\r\n    //     return () => {\r\n    //       const originalCluster = this.getThemeCluster(\r\n    //         ORIGINAL_THEME.replace(\"#\", \"\")\r\n    //       );\r\n    //       const newStyle = this.updateStyle(\r\n    //         this[variable],\r\n    //         originalCluster,\r\n    //         themeCluster\r\n    //       );\r\n\r\n    //       let styleTag = document.getElementById(id);\r\n    //       if (!styleTag) {\r\n    //         styleTag = document.createElement(\"style\");\r\n    //         styleTag.setAttribute(\"id\", id);\r\n    //         document.head.appendChild(styleTag);\r\n    //       }\r\n    //       styleTag.innerText = newStyle;\r\n    //     };\r\n    //   };\r\n\r\n    //   const chalkHandler = getHandler(\"chalk\", \"chalk-style\");\r\n\r\n    //   if (!this.chalk) {\r\n    //     const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`;\r\n    //     this.getCSSString(url, chalkHandler, \"chalk\");\r\n    //   } else {\r\n    //     chalkHandler();\r\n    //   }\r\n\r\n    //   const styles = [].slice\r\n    //     .call(document.querySelectorAll(\"style\"))\r\n    //     .filter(style => {\r\n    //       const text = style.innerText;\r\n    //       return (\r\n    //         new RegExp(oldVal, \"i\").test(text) && !/Chalk Variables/.test(text)\r\n    //       );\r\n    //     });\r\n    //   styles.forEach(style => {\r\n    //     const { innerText } = style;\r\n    //     if (typeof innerText !== \"string\") return;\r\n    //     style.innerText = this.updateStyle(\r\n    //       innerText,\r\n    //       originalCluster,\r\n    //       themeCluster\r\n    //     );\r\n    //   });\r\n\r\n    // }\r\n  },\r\n\r\n  methods: {\r\n    CheckIsColor (bgVal) {\r\n      console.log(bgVal, '初始化主题色');\r\n      if (!bgVal) return false\r\n      this.$store.commit('editThemeColor', bgVal)\r\n\r\n      　　var type = \"^#[0-9a-fA-F]{6}$\";\r\n      　　var re = new RegExp(type);\r\n      　　if (bgVal.match(re) == null) {\r\n        　　　　type = \"^[rR][gG][Bb][\\(]([\\\\s]*(2[0-4][0-9]|25[0-5]|[01]?[0-9][0-9]?)[\\\\s]*,){2}[\\\\s]*(2[0-4]\\\\d|25[0-5]|[01]?\\\\d\\\\d?)[\\\\s]*[\\)]{1}$\";\r\n        　　　　re = new RegExp(type);\r\n        　　　　if (bgVal.match(re) == null) {\r\n          　　　　　　return false;\r\n        　　　　} else {\r\n          　　　　　　return true;\r\n        　　　　}\r\n      　　　} else {\r\n        　　　　return true;\r\n      　　}\r\n    },\r\n    updateStyle (style, oldCluster, newCluster) {\r\n      let newStyle = style;\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, \"ig\"), newCluster[index]);\r\n      });\r\n      return newStyle;\r\n    },\r\n\r\n    getCSSString (url, callback, variable) {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n          this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, \"\");\r\n          callback();\r\n        }\r\n      };\r\n      xhr.open(\"GET\", url);\r\n      xhr.send();\r\n    },\r\n\r\n    getThemeCluster (theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16);\r\n        let green = parseInt(color.slice(2, 4), 16);\r\n        let blue = parseInt(color.slice(4, 6), 16);\r\n\r\n        if (tint === 0) {\r\n          // when primary color is in its rgb space\r\n          return [red, green, blue].join(\",\");\r\n        } else {\r\n          red += Math.round(tint * (255 - red));\r\n          green += Math.round(tint * (255 - green));\r\n          blue += Math.round(tint * (255 - blue));\r\n\r\n          red = red.toString(16);\r\n          green = green.toString(16);\r\n          blue = blue.toString(16);\r\n\r\n          return `#${red}${green}${blue}`;\r\n        }\r\n      };\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16);\r\n        let green = parseInt(color.slice(2, 4), 16);\r\n        let blue = parseInt(color.slice(4, 6), 16);\r\n\r\n        red = Math.round((1 - shade) * red);\r\n        green = Math.round((1 - shade) * green);\r\n        blue = Math.round((1 - shade) * blue);\r\n\r\n        red = red.toString(16);\r\n        green = green.toString(16);\r\n        blue = blue.toString(16);\r\n\r\n        return `#${red}${green}${blue}`;\r\n      };\r\n\r\n      const clusters = [theme];\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1));\r\n      return clusters;\r\n    }\r\n  }\r\n};\r\n</script>\r\n \r\n<style>\r\n.theme-picker .el-color-picker__trigger {\r\n  vertical-align: middle;\r\n}\r\n \r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"]}]}